Name;Revision;Veraltet;dbms;NameTabelle;NameTabelle2;sql_drop;sql_create
t_INSERT_EIGENESCHULE_ABSCHNITTE;0;1;MARIA_DB;SchuelerLernabschnittsdaten;EigeneSchule;"DROP TRIGGER IF EXISTS t_INSERT_EIGENESCHULE_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_EIGENESCHULE_ABSCHNITTE
BEFORE INSERT ON EigeneSchule FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Schuljahr IS NOT NULL AND NEW.SchuljahrAbschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Schuljahr AND Schuljahresabschnitte.Abschnitt = NEW.SchuljahrAbschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Schuljahr, NEW.SchuljahrAbschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Schuljahr AND Schuljahresabschnitte.Abschnitt = NEW.SchuljahrAbschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_SCHUELER_ABSCHNITTE;0;1;MARIA_DB;Schueler;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELER_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELER_ABSCHNITTE
BEFORE INSERT ON Schueler FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.AktSchuljahr IS NOT NULL AND NEW.AktAbschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.AktSchuljahr AND Schuljahresabschnitte.Abschnitt = NEW.AktAbschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.AktSchuljahr, NEW.AktAbschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.AktSchuljahr AND Schuljahresabschnitte.Abschnitt = NEW.AktAbschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_SCHUELERLERNABSCHNITTDATEN_ABSCHNITTE;0;1;MARIA_DB;SchuelerLernabschnittsdaten;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERLERNABSCHNITTDATEN_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELERLERNABSCHNITTDATEN_ABSCHNITTE
BEFORE INSERT ON SchuelerLernabschnittsdaten FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_SCHUELERABITUR_ABSCHNITTE;0;1;MARIA_DB;SchuelerAbitur;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERABITUR_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELERABITUR_ABSCHNITTE
BEFORE INSERT ON SchuelerAbitur FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_SCHUELERANKREUZFLOSKELN_ABSCHNITTE;0;1;MARIA_DB;SchuelerAnkreuzfloskeln;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERANKREUZFLOSKELN_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELERANKREUZFLOSKELN_ABSCHNITTE
BEFORE INSERT ON SchuelerAnkreuzfloskeln FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
      END IF;
      SET id := (SELECT SchuelerLernabschnittsdaten.ID FROM SchuelerLernabschnittsdaten WHERE SchuelerLernabschnittsdaten.Schueler_ID = NEW.Schueler_ID AND SchuelerLernabschnittsdaten.Jahr = NEW.Jahr AND SchuelerLernabschnittsdaten.Abschnitt = NEW.Abschnitt);
      IF id IS NOT NULL THEN
          SET NEW.Abschnitt_ID = id;
      END IF;
    END IF;
END"
t_INSERT_SCHUELERBKABSCHLUSS_ABSCHNITTE;0;1;MARIA_DB;SchuelerBKAbschluss;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERBKABSCHLUSS_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELERBKABSCHLUSS_ABSCHNITTE
BEFORE INSERT ON SchuelerBKAbschluss FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_SCHUELERBKFAECHER_ABSCHNITTE;0;1;MARIA_DB;SchuelerBKFaecher;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERBKFAECHER_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELERBKFAECHER_ABSCHNITTE
BEFORE INSERT ON SchuelerBKFaecher FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_SCHUELERFOERDEREMPFEHLUNGEN_ABSCHNITTE;0;1;MARIA_DB;SchuelerFoerderempfehlungen;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERFOERDEREMPFEHLUNGEN_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELERFOERDEREMPFEHLUNGEN_ABSCHNITTE
BEFORE INSERT ON SchuelerFoerderempfehlungen FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
      END IF;
      SET id := (SELECT SchuelerLernabschnittsdaten.ID FROM SchuelerLernabschnittsdaten WHERE SchuelerLernabschnittsdaten.Schueler_ID = NEW.Schueler_ID AND SchuelerLernabschnittsdaten.Jahr = NEW.Jahr AND SchuelerLernabschnittsdaten.Abschnitt = NEW.Abschnitt);
      IF id IS NOT NULL THEN
          SET NEW.Abschnitt_ID = id;
      END IF;
    END IF;
END"
t_INSERT_SCHUELERKAOADATEN_ABSCHNITTE;0;1;MARIA_DB;SchuelerKAoADaten;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERKAOADATEN_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_SCHUELERKAOADATEN_ABSCHNITTE
BEFORE INSERT ON SchuelerKAoADaten FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
      END IF;
      SET id := (SELECT SchuelerLernabschnittsdaten.ID FROM SchuelerLernabschnittsdaten WHERE SchuelerLernabschnittsdaten.Schueler_ID = NEW.Schueler_ID AND SchuelerLernabschnittsdaten.Jahr = NEW.Jahr AND SchuelerLernabschnittsdaten.Abschnitt = NEW.Abschnitt);
      IF id IS NOT NULL THEN
          SET NEW.Abschnitt_ID = id;
      END IF;
    END IF;
END"
t_INSERT_LEHRERLERNABSCHNITTSDATEN_ABSCHNITTE;0;1;MARIA_DB;LehrerAbschnittsdaten;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_LEHRERLERNABSCHNITTSDATEN_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_LEHRERLERNABSCHNITTSDATEN_ABSCHNITTE
BEFORE INSERT ON LehrerAbschnittsdaten FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_LEHRERANRECHNUNG_ABSCHNITTE;0;1;MARIA_DB;LehrerAnrechnung;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_LEHRERANRECHNUNG_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_LEHRERANRECHNUNG_ABSCHNITTE
BEFORE INSERT ON LehrerAnrechnung FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
      END IF;
      SET id := (SELECT LehrerAbschnittsdaten.ID FROM LehrerAbschnittsdaten WHERE LehrerAbschnittsdaten.Lehrer_ID = NEW.Lehrer_ID AND LehrerAbschnittsdaten.Jahr = NEW.Jahr AND LehrerAbschnittsdaten.Abschnitt = NEW.Abschnitt);
      IF id IS NOT NULL THEN
          SET NEW.Abschnitt_ID = id;
      END IF;
    END IF;
END"
t_INSERT_LEHRERENTLASTUNG_ABSCHNITTE;0;1;MARIA_DB;LehrerEntlastung;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_LEHRERENTLASTUNG_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_LEHRERENTLASTUNG_ABSCHNITTE
BEFORE INSERT ON LehrerEntlastung FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
      END IF;
      SET id := (SELECT LehrerAbschnittsdaten.ID FROM LehrerAbschnittsdaten WHERE LehrerAbschnittsdaten.Lehrer_ID = NEW.Lehrer_ID AND LehrerAbschnittsdaten.Jahr = NEW.Jahr AND LehrerAbschnittsdaten.Abschnitt = NEW.Abschnitt);
      IF id IS NOT NULL THEN
          SET NEW.Abschnitt_ID = id;
      END IF;
    END IF;
END"
t_INSERT_LEHRERFUNKTIONEN_ABSCHNITTE;0;1;MARIA_DB;LehrerFunktionen;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_LEHRERFUNKTIONEN_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_LEHRERFUNKTIONEN_ABSCHNITTE
BEFORE INSERT ON LehrerFunktionen FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
      END IF;
      SET id := (SELECT LehrerAbschnittsdaten.ID FROM LehrerAbschnittsdaten WHERE LehrerAbschnittsdaten.Lehrer_ID = NEW.Lehrer_ID AND LehrerAbschnittsdaten.Jahr = NEW.Jahr AND LehrerAbschnittsdaten.Abschnitt = NEW.Abschnitt);
      IF id IS NOT NULL THEN
          SET NEW.Abschnitt_ID = id;
      END IF;
    END IF;
END"
t_INSERT_LEHRERMEHRLEISTUNG_ABSCHNITTE;0;1;MARIA_DB;LehrerMehrleistung;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_LEHRERMEHRLEISTUNG_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_LEHRERMEHRLEISTUNG_ABSCHNITTE
BEFORE INSERT ON LehrerMehrleistung FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
      END IF;
      SET id := (SELECT LehrerAbschnittsdaten.ID FROM LehrerAbschnittsdaten WHERE LehrerAbschnittsdaten.Lehrer_ID = NEW.Lehrer_ID AND LehrerAbschnittsdaten.Jahr = NEW.Jahr AND LehrerAbschnittsdaten.Abschnitt = NEW.Abschnitt);
      IF id IS NOT NULL THEN
          SET NEW.Abschnitt_ID = id;
      END IF;
    END IF;
END"
t_INSERT_KURSE_ABSCHNITTE;0;1;MARIA_DB;Kurse;Schuljahresabschnitte;"DROP TRIGGER IF EXISTS t_INSERT_KURSE_ABSCHNITTE;";"CREATE TRIGGER t_INSERT_KURSE_ABSCHNITTE
BEFORE INSERT ON Kurse FOR EACH ROW
BEGIN
    DECLARE id INTEGER;
    IF NEW.Jahr IS NOT NULL AND NEW.Abschnitt IS NOT NULL THEN
      SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      IF id IS NULL THEN
          INSERT INTO Schuljahresabschnitte(Jahr, Abschnitt) VALUES (NEW.Jahr, NEW.Abschnitt);
          SET id := (SELECT Schuljahresabschnitte.ID FROM Schuljahresabschnitte WHERE Schuljahresabschnitte.Jahr = NEW.Jahr AND Schuljahresabschnitte.Abschnitt = NEW.Abschnitt);
      END IF;
      SET NEW.Schuljahresabschnitts_ID = id;
    END IF;
END"
t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MARIA_DB;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER INSERT
	ON SchuelerLeistungsdaten FOR EACH ROW
BEGIN
    DECLARE schuelerID INTEGER;
    IF NEW.Kurs_ID IS NOT NULL THEN
		SET schuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        INSERT INTO Kurs_Schueler(Kurs_ID, Schueler_ID) VALUES (NEW.Kurs_ID, schuelerID);
    END IF;
END"
t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MARIA_DB;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER UPDATE
	ON SchuelerLeistungsdaten FOR EACH ROW
BEGIN
    DECLARE alteSchuelerID, neueSchuelerID INTEGER;
    IF NEW.Kurs_ID IS NOT NULL AND OLD.Kurs_ID IS NOT NULL AND OLD.Kurs_ID <> NEW.Kurs_ID THEN
		SET alteSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        IF OLD.Abschnitt_ID <> NEW.Abschnitt_ID THEN
			SET neueSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
		ELSE
            SET neueSchuelerID := alteSchuelerID;
        END IF;
        UPDATE Kurs_Schueler SET Kurs_Schueler.Kurs_ID = NEW.Kurs_ID, Kurs_Schueler.Schueler_ID = neueSchuelerID WHERE Kurs_Schueler.Kurs_ID = OLD.Kurs_ID AND Kurs_Schueler.SCHUELER_ID = alteSchuelerID;
    ELSEIF NEW.Kurs_ID IS NULL THEN
        SET alteSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        DELETE FROM Kurs_Schueler WHERE Kurs_Schueler.Kurs_ID = OLD.Kurs_ID AND Kurs_Schueler.SCHUELER_ID = alteSchuelerID;        
    ELSEIF OLD.Kurs_ID IS NULL THEN
		SET neueSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        INSERT INTO Kurs_Schueler(Kurs_ID, Schueler_ID) VALUES (NEW.Kurs_ID, neueSchuelerID);
    END IF;
END"
t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MARIA_DB;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER DELETE
	ON SchuelerLeistungsdaten FOR EACH ROW
BEGIN
    DECLARE schuelerID INTEGER;
    IF OLD.Kurs_ID IS NOT NULL THEN
		SET schuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        DELETE FROM Kurs_Schueler WHERE Kurs_Schueler.Kurs_ID = OLD.Kurs_ID AND Kurs_Schueler.SCHUELER_ID = schuelerID;
    END IF;
END"
t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MYSQL;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER INSERT
	ON SchuelerLeistungsdaten FOR EACH ROW
BEGIN
    DECLARE schuelerID INTEGER;
    IF NEW.Kurs_ID IS NOT NULL THEN
		SET schuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        INSERT INTO Kurs_Schueler(Kurs_ID, Schueler_ID) VALUES (NEW.Kurs_ID, schuelerID);
    END IF;
END"
t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MYSQL;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER UPDATE
	ON SchuelerLeistungsdaten FOR EACH ROW
BEGIN
    DECLARE alteSchuelerID, neueSchuelerID INTEGER;
    IF NEW.Kurs_ID IS NOT NULL AND OLD.Kurs_ID IS NOT NULL AND OLD.Kurs_ID <> NEW.Kurs_ID THEN
		SET alteSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        IF OLD.Abschnitt_ID <> NEW.Abschnitt_ID THEN
			SET neueSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
		ELSE
            SET neueSchuelerID := alteSchuelerID;
        END IF;
        UPDATE Kurs_Schueler SET Kurs_Schueler.Kurs_ID = NEW.Kurs_ID, Kurs_Schueler.Schueler_ID = neueSchuelerID WHERE Kurs_Schueler.Kurs_ID = OLD.Kurs_ID AND Kurs_Schueler.SCHUELER_ID = alteSchuelerID;
    ELSEIF NEW.Kurs_ID IS NULL THEN
        SET alteSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        DELETE FROM Kurs_Schueler WHERE Kurs_Schueler.Kurs_ID = OLD.Kurs_ID AND Kurs_Schueler.SCHUELER_ID = alteSchuelerID;        
    ELSEIF OLD.Kurs_ID IS NULL THEN
		SET neueSchuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        INSERT INTO Kurs_Schueler(Kurs_ID, Schueler_ID) VALUES (NEW.Kurs_ID, neueSchuelerID);
    END IF;
END"
t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MYSQL;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER DELETE
	ON SchuelerLeistungsdaten FOR EACH ROW
BEGIN
    DECLARE schuelerID INTEGER;
    IF OLD.Kurs_ID IS NOT NULL THEN
		SET schuelerID := (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID);
        DELETE FROM Kurs_Schueler WHERE Kurs_Schueler.Kurs_ID = OLD.Kurs_ID AND Kurs_Schueler.SCHUELER_ID = schuelerID;
    END IF;
END"
t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;SQLITE;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER INSERT
	ON SchuelerLeistungsdaten FOR EACH ROW
	WHEN NEW.Kurs_ID IS NOT NULL
BEGIN
    INSERT INTO Kurs_Schueler(Kurs_ID, Schueler_ID) VALUES (NEW.Kurs_ID, (SELECT Schueler.id FROM SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID));
END;"
t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_1;2;-1;SQLITE;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_1;";"CREATE TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_1
AFTER UPDATE
	ON SchuelerLeistungsdaten FOR EACH ROW
	WHEN NEW.Kurs_ID IS NOT NULL AND 
		OLD.Kurs_ID IS NOT NULL AND 
		OLD.Kurs_ID <> NEW.Kurs_ID AND
		OLD.Abschnitt_ID <> NEW.Abschnitt_ID
BEGIN
	UPDATE 
		Kurs_Schueler
	SET 
		Kurs_ID = NEW.Kurs_ID, 
		Schueler_ID = (
			SELECT 
				Schueler.id 
			FROM 
				SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID
		)
	WHERE 
		Kurs_ID = OLD.Kurs_ID AND 
		SCHUELER_ID = (
			SELECT 
				Schueler.id 
			FROM 
				SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID
			);
END;"
t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_2;2;-1;SQLITE;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_2;";"CREATE TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_2
AFTER UPDATE
	ON SchuelerLeistungsdaten FOR EACH ROW
	WHEN NEW.Kurs_ID IS NOT NULL AND 
		OLD.Kurs_ID IS NOT NULL AND 
		OLD.Kurs_ID <> NEW.Kurs_ID AND
		OLD.Abschnitt_ID = NEW.Abschnitt_ID
BEGIN
	UPDATE 
		Kurs_Schueler 
	SET 
		Kurs_ID = NEW.Kurs_ID 
	WHERE 
		Kurs_ID = OLD.Kurs_ID AND 
		SCHUELER_ID = (
			SELECT 
				Schueler.id 
			FROM 
				SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID
			);
END;"
t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_3;2;-1;SQLITE;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_3;";"CREATE TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_3
AFTER UPDATE
	ON SchuelerLeistungsdaten FOR EACH ROW
	WHEN NEW.Kurs_ID IS NULL AND 
		OLD.Kurs_ID IS NOT NULL
BEGIN
	DELETE FROM 
		Kurs_Schueler 
	WHERE 
		Kurs_ID = OLD.Kurs_ID AND 
		SCHUELER_ID = (
			SELECT 
				Schueler.id 
			FROM 
				SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID
			);
END;"
t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_4;2;-1;SQLITE;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_4;";"CREATE TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER_4
AFTER UPDATE
	ON SchuelerLeistungsdaten FOR EACH ROW
	WHEN NEW.Kurs_ID IS NOT NULL AND 
		OLD.Kurs_ID IS NULL
BEGIN
	INSERT INTO 
		Kurs_Schueler(Kurs_ID, Schueler_ID) 
	VALUES (
		NEW.Kurs_ID, 
		( SELECT 
			Schueler.id 
		  FROM 
			SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = NEW.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID
		)
	);
END;"
t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;SQLITE;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER IF EXISTS t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
AFTER DELETE
	ON SchuelerLeistungsdaten FOR EACH ROW
	WHEN OLD.Kurs_ID IS NOT NULL
BEGIN
	DELETE FROM 
		Kurs_Schueler 
	WHERE 
		Kurs_ID = OLD.Kurs_ID AND 
		SCHUELER_ID = ( 
			SELECT 
				Schueler.id 
			FROM 
				SchuelerLernabschnittsdaten JOIN Schueler ON SchuelerLernabschnittsdaten.ID = OLD.Abschnitt_ID AND SchuelerLernabschnittsdaten.Schueler_ID = Schueler.ID
		);
END;"
t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MSSQL;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_INSERT_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
ON SchuelerLeistungsdaten AFTER INSERT AS
BEGIN
	INSERT INTO Kurs_Schueler(Kurs_ID, Schueler_ID)
		SELECT 
			i.Kurs_ID, sla.Schueler_ID 
		FROM
	  		Inserted i JOIN SchuelerLernabschnittsdaten sla ON i.Abschnitt_ID = sla.ID
		WHERE
	  		i.Kurs_ID IS NOT NULL
END;"
t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MSSQL;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_UPDATE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
ON SchuelerLeistungsdaten AFTER UPDATE AS
BEGIN	
	DELETE Kurs_Schueler FROM  
		Inserted i JOIN Deleted d ON i.ID = d.ID AND i.Kurs_ID IS NULL AND d.Kurs_ID IS NOT NULL
			JOIN SchuelerLernabschnittsdaten sla ON sla.ID = d.Abschnitt_ID
			JOIN Kurs_Schueler ks ON ks.Kurs_ID = d.Kurs_ID AND ks.Schueler_ID = sla.Schueler_ID
	INSERT INTO Kurs_Schueler(Kurs_ID, Schueler_ID)
		SELECT 
			i.Kurs_ID, sla.Schueler_ID 
		FROM
			Inserted i JOIN Deleted d ON i.ID = d.ID AND i.Kurs_ID IS NOT NULL AND d.Kurs_ID IS NULL
				JOIN SchuelerLernabschnittsdaten sla ON sla.ID = i.Abschnitt_ID
	UPDATE Kurs_Schueler
		SET Kurs_ID = i.Kurs_ID, Schueler_ID = sla.Schueler_ID
		FROM 
			Inserted i JOIN Deleted d ON i.ID = d.ID AND i.Kurs_ID IS NOT NULL AND d.Kurs_ID IS NOT NULL AND i.Kurs_ID <> d.Kurs_ID AND i.Abschnitt_ID = d.Abschnitt_ID
				JOIN SchuelerLernabschnittsdaten sla ON sla.ID = d.Abschnitt_ID
	UPDATE Kurs_Schueler
		SET Kurs_ID = i.Kurs_ID, Schueler_ID = sla.Schueler_ID
		FROM 
			Inserted i JOIN Deleted d ON i.ID = d.ID AND i.Kurs_ID IS NOT NULL AND d.Kurs_ID IS NOT NULL AND i.Kurs_ID <> d.Kurs_ID AND i.Abschnitt_ID <> d.Abschnitt_ID
				JOIN SchuelerLernabschnittsdaten sla ON sla.ID = i.Abschnitt_ID
END;"
t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;2;-1;MSSQL;SchuelerLeistungsdaten;Kurs_Schueler;"DROP TRIGGER t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER;";"CREATE TRIGGER t_DELETE_SCHUELERLEISTUNGSDATEN_KURS_SCHUELER
ON SchuelerLeistungsdaten AFTER DELETE AS
BEGIN
	DELETE Kurs_Schueler FROM  
		Deleted d 
			JOIN SchuelerLernabschnittsdaten sla ON sla.ID = d.Abschnitt_ID AND d.Kurs_ID IS NOT NULL
			JOIN Kurs_Schueler ks ON ks.Kurs_ID = d.Kurs_ID AND ks.Schueler_ID = sla.Schueler_ID
END;"
